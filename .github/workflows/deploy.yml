name: ECS Deploy
on:
  workflow_dispatch:

env:
  AWS_ROLE_ARN: arn:aws:iam::226259849760:role/gha-profile-api-role
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: profile-api
  ECS_TASK_DEF_FILE: task-definition.json
  ECS_SERVICE: profile-api
  ECS_CLUSTER: profile-cluster
  CONTAINER_NAME: profile-api

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-to-ecr:
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: deploy-session

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Set IMAGE_TAG
        id: set_image_tag
        run: echo "IMAGE_TAG=$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker buildx build \
          -f Dockerfile \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set_image_tag.outputs.IMAGE_TAG }} \
          .

  deploy-to-ecs:
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: deploy-session

      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
        with:
          mask-password: "true"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task_definitions/${{ env.ECS_TASK_DEF_FILE }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{needs.build-and-push-to-ecr.outputs.image_tag}}

      - name: Registers ECS task definition and deploys ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
